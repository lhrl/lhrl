<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd

           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd

           http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
       default-lazy-init="false" xmlns:aop="http://www.springframework.org/schema/aop">


    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/common/lhrlconfig.properties</value>
            </list>
        </property>
    </bean>

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementExecutableSqlLogEnable" value="true"/>
        <property name="statementExecuteAfterLogEnabled" value="false"/>
    </bean>

	
	<!-- 主数据源 -->
    <!--<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
            </list>
        </property>
        <property name="url" value="${insr.druid.url}"/>
        <property name="username" value="${insr.druid.userName}"/>
        <property name="password" value="${insr.druid.password}"/>
        <property name="filters" value="${insr.druid.filters}"/>
        <property name="maxActive" value="${insr.druid.maxActive}"/>
        <property name="initialSize" value="${insr.druid.initialSize}"/>
        <property name="maxWait" value="${insr.druid.maxWait}"/>
        <property name="minIdle" value="${insr.druid.minIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${insr.druid.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${insr.druid.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${insr.druid.validationQuery}"/>
        <property name="testWhileIdle" value="${insr.druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${insr.druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${insr.druid.testOnReturn}"/>
        <property name="poolPreparedStatements" value="${insr.druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${insr.druid.maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>
    -->
    
	<!-- 从数据源 -->
    <bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${master.jdbc.driver}"/>
        <property name="url" value="${master.jdbc.url}"/>
        <property name="username" value="${master.jdbc.username}"/>
        <property name="password" value="${master.jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 校验语句 -->
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>
    
     <!-- 动态数据源 -->
    <!--<bean id="dataSource" class="com.lhrl.common.db.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                &lt;!&ndash; 可配置多个数据源 &ndash;&gt;
                <entry value-ref="masterDataSource" key="masterDataSource"></entry>
                <entry value-ref="slaveDataSource" key="slaveDataSource"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="slaveDataSource"></property>
    </bean>
    -->
    

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="slaveDataSource"/>
        <property name="packagesToScan" value="com.lhrl.domain"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${master.jdbc.hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
                <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
                <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}
                </prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
                <prop key="javax.persistence.validation.mode">${javax.persistence.validation.mode}</prop>
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate4.SpringSessionContext
                </prop>
            </props>
        </property>
    </bean>

    <!-- 事务配置 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="-1"/>

    <!-- 注解任务 -->
    <task:annotation-driven proxy-target-class="true"/>
    
     <!-- DaoFactory注入 -->
    <bean id="daoFactory" class="com.lhrl.common.dao.DaoFactoryBean">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <!-- dubbo注册 -->
    <dubbo:registry address="${dubbo.registry.address}" client="${dubbo.registry.client}"  file="${dubbo.registry.file}"/>
    <!-- dubbo Filter -->
    <dubbo:provider filter="${dubbo.provider.filter}"/>

    <!-- 注解扫描 -->
    <dubbo:annotation package="com.lhrl"/>
	<import resource="/spring-cache.xml"/>
</beans>